var iniobj = {
    to: [],
    check: '',
    idx: 0
};

var inicheck = function() {
    iniobj.po = iniobj.to;
    iniobj.to = JSON.parse(Campaign().get('turnorder'));
    iniobj.check = _.find(iniobj.to, function(obj) { return obj.custom == 'Initiative Round'});
    iniobj.idx = iniobj.to.indexOf(iniobj.check);
};

var addini = function(oTurnOrder) {
    oTurnOrder.unshift({
        id: '-1',
        pr: '1',
        custom: 'Initiative Round'
    });
    Campaign().set("turnorder", JSON.stringify(oTurnOrder));
};

const chatMessage = (feedback, who) => {
    if (who) {
        sendChat('API', `/w ${who} <div class='center'>${feedback}</div>`);
    } else {
        sendChat('API', `<div class='center'>${feedback}</div>`);
    }
};

on('chat:message', (msg) => {
    log(msg)

    // Check for "!ini" command
    if(msg.type == 'api' && msg.content.indexOf('ini') !== -1) {
        const args = msg.content.split(" --");
        if (args.length > 1) {
            if (msg.selected != undefined) {
                const capitlizedActionSpeed = args[1].charAt(0).toUpperCase() + args[1].slice(1);
                if (args.includes('fast') || args.includes('slow')) {
                    initAction(msg.selected, capitlizedActionSpeed);
                } else {
                    chatMessage(`Incorrect api command. Did not include --fast or -- slow`, msg.who);
                }
            } else {
                chatMessage(`No token selected.`, msg.who);
            };
        } else {
            //Open Tracker if not open
            if(Campaign().get('initiativepage') === false) {
                Campaign().set('initiativepage', true);
            };
            //Setup iniobj
            inicheck();
            //Create "Initiative Round" if it doesn't exist
            if(iniobj.check === undefined){
                addini(iniobj.to);
            }
            //Otherwise start a new turn
            else{
                iniobj.to.splice(iniobj.idx, 1);
                addini(iniobj.to);
            };
        };
    };
});


//Used to get character attributes for Linking Tokens
const getIDsFromTokens = (selectedToken) => {
    return [selectedToken].map(obj => getObj("graphic", obj._id))
        .filter(x => !!x)
        .map(token => token.get("represents"))
        .filter(id => getObj("character", id || ""));
};

const initAction = (selected, actionSpeed) => {
    let turnorder = (Campaign().get("turnorder") == "") ? [] :  JSON.parse(Campaign().get("turnorder"));

    selected.forEach((token) => {
        const characterID = getIDsFromTokens(token);
        const characterName = getAttrByName([characterID], 'character_name');

        if (turnorder.length === 0) {
            turnorder.push({
                id: token['_id'],
                pr: actionSpeed,
                custom: characterName
            });
        } else {
            let tokenFoundInTurnOrder = false;
            turnorder.forEach((turnToken) => {
                if (turnToken['custom'] === characterName) {
                    turnToken['pr'] = actionSpeed
                    tokenFoundInTurnOrder = true
                };
            });

            if (!tokenFoundInTurnOrder) {
                turnorder.push({
                    id: token['_id'],
                    pr: actionSpeed,
                    custom: characterName
                });   
            };
        };
    });

    log(turnorder);
    Campaign().set("turnorder", JSON.stringify(turnorder));
};

//Check for iniobj to make it to top of tracker
on('change:campaign:turnorder', function() {
    inicheck();
    if(iniobj.idx === 0 && (_.isArray(iniobj.to) && _.isArray(iniobj.po) && !_.isEqual(iniobj.to[0],iniobj.po[0]) ) || (_.isArray(iniobj.to) && ! _.isArray(iniobj.po))){
        iniobj.to[0].pr++;
        for (var i = 1; i < iniobj.to.length; i++) {
            iniobj.to[i].pr = "";
            iniobj.to[i].pr = iniobj.to[i].pr < 0 ? 0 : iniobj.to[i].pr;
        };
        Campaign().set("turnorder", JSON.stringify(iniobj.to));
    };
});

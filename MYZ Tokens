var handoutFormatter = handoutFormatter || (function() {
    'use strict';
    const blue       = '#063e62';
    const gold       = '#b49e67';
    const red        = `#8f1313`;
    const divstyle   = 'style="color: #eee;width: 90%; border: 1px solid black; background-color: #131415; padding: 5px;"';
    const astyle1    = `style="text-align:center; border: 1px solid black; margin: 1px; padding: 2px; background-color: ${blue}; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; width: 100px;`;
    const astyle2    = `style="text-align:center; border: 1px solid black; margin: 3px; padding: 2px; background-color: ${blue}; border-radius: 4px;  box-shadow: 1px 1px 1px #707070; width: 150px;`;
    const arrowstyle = `style="border: none; border-top: 3px solid transparent; border-bottom: 3px solid transparent; border-left: 195px solid ${gold}; margin: 5px 0px;"`;
    const headstyle  = `style="color: #fff; font-size: 18px; text-align: left; font-constiant: small-caps; font-family: Times, serif; margin-bottom: 2px;"`;
    const substyle   = 'style="font-size: 11px; line-height: 13px; margin-top: -2px; font-style: italic;"';
    const breaks     = `style="border-color:${gold}; margin: 5px 2px;"`;
    const label      = `style="color: #c9c9c9; display:inline-block; width: 50%"`;
    const label2     = `style="color: #c9c9c9; display:inline-block; width: 32%"`;
    const version    = '1.2';

    const handleInput = (msg) => {
        const args = msg.content.split(" --");
        if (msg.type !== "api") { return; }
        log(args);
        if (args[0] === "!handout") {
            switch(args[1]) {
                case 'create':
                    createHandout();
                    break;
                case 'links':
                    linksHandout();
                    break;
                default :
                     apiMenu();
                     break;
            };
        } else if (args[0] === "!token") {
            if (args[1] === 'link' && msg.selected != undefined) {
                linkTokens(msg.selected);
            } else {
                sendChat('Module Helper', '/w gm <div ' + divstyle + '>' +
                    `<div ${headstyle}>Module Helper</div>` +
                    `<div ${substyle}>Menu (v.${version})</div>` +
                    '<div ' + arrowstyle + '></div>' +
                    `<div style="text-align:center;">No tokens selected.</div>` +
                    '</div>'
                );
            }
        };
    },

    apiMenu = () => {
        sendChat('Module Helper', '/w gm <div ' + divstyle + '>' +
            `<div ${headstyle}>Module Helper</div>` +
            `<div ${substyle}>Menu (v.${version})</div>` +
            '<div ' + arrowstyle + '></div>' +
            `<div style="text-align:center;"><a ${astyle2}" href="!handout --create">Create/Update Handouts</a></div>` +
            `<hr ${breaks} />` +
            `<div style="text-align:center;"><a ${astyle2}" href="!handout --links">Links Handout</a></div>` +
            `<hr ${breaks} />` +
            `<div style="text-align:center;"><a ${astyle2}" href="!token --link">Link Tokens</a></div>` +
            `<hr ${breaks} />` +
            '</div>'
        );
    },

    createHandout = () => {
        const handoutText = [{ }];

        const handoutObjects = findObjs({
            _type: 'handout'
        });

        let feedback = "", handoutsCreated = 0, handoutsUpdated = 0;
        handoutText.forEach((data) => {
            const name = data.name, notes = 'gmnotes', text = data.text;
            const string = JSON.stringify(data.name);
            if (JSON.stringify(handoutObjects).includes(data.name)) {
                existingHandout(name, notes, text);
                handoutsUpdated += 1;
            } else {
                newHandout(name, notes, text);
                handoutsCreated += 1;
            };
        });

        chatMessage(`<div style="text-align:center;">Created ${handoutsCreated} handouts, Updated ${handoutsUpdated}</div>`);
    },

    //== Create a handout full of links
    linksHandout = () => {
        const handoutObjects = findObjs({_type: 'handout'});
        let handoutText      = "<h1>Handout Links</h1><hr>";
        handoutText += journalItemsTitles("handout");
        handoutText += "<hr>";
        handoutText += journalItemsTitles("character");
        
        const name   = "Handout Links", notes = 'notes', text = handoutText;
        let feedback = "";
        if (JSON.stringify(handoutObjects).includes("Handout Links")) {
            existingHandout(name, notes, text);
            feedback += "Updating Handout Links handout"
        } else {
            newHandout(name, notes, text);
            feedback += "Creating Handout Links"
         };

        chatMessage(`<div style="text-align:center;">${feedback}</div>`);
    },

    //== Create lists for the Linking handout
    journalItemsTitles = (type) => {
        const journalObjects = findObjs({_type: type});
        let sortArray        = [];
        let text             = "";

        text += `<h2>${type.charAt(0).toUpperCase()}${type.slice(1)}s</h2>`;
        journalObjects.forEach((data) => {
            if (data.attributes.name && data.attributes.name != "Handout Links") {
                sortArray.push(`[${data.attributes.name}] <br>`);
            } else {
                log("Journal item lacked a name"); 
            };
        });
        const sorted = sortArray.sort();
        sorted.forEach((title) => { text += title; });
        return text
    },

    //== Update a Handout 
    existingHandout = (name, notes, text) => {
        const existingHandout = findObjs({
            name: name
        });
        const id      = JSON.stringify(existingHandout).split(`_id":"`)[1].split(`","`)[0];
        const handout = getObj("handout", id);
        handout.set(notes, text);
    },

    //== Createe a new Handout
    newHandout = (name, notes, text) => {
        const avatar  = "https://s3.amazonaws.com/files.d20.io/images/35666065/0hOTGz_lbcziK4anAuVROw/max.png?1499526251";
        const handout = createObj('handout', {
            name: name,
            avatar: avatar
        }); 
        handout.set(notes, text);
    },

///== his needs to look at a token's linked character sheet. 
    linkTokens = (selected) => {
        selected.forEach((token) => {
            const tokenID     = JSON.stringify(token).split(`_id":"`)[1].split(`","`)[0];
            const characterID = getIDsFromTokens(token);
            const str      = getAttrByName([characterID], 'strength', "strength_max")
            const agi         = getAttrByName([characterID], 'agility', "agility_max");
            const mp          = getAttrByName([characterID], 'mutation', "mutation_max");
            let mods          = {}; 
            
            mods.bar1_value = str;
            mods.bar1_max   = str;
            mods.bar2_value = agi;
            mods.bar2_max = agi;
            mods.bar3_value = mp;
            mods.bar3_max = 10;
            mods.showname   = true;
            mods.showplayers_bar1 = true;
            mods.showplayers_bar2 = true;

            //log("Token ID: " + JSON.stringify(tokenID) + "," + "Character ID: " + JSON.stringify(characterID));
            //log("Str: " + JSON.stringify(str)); 

            const tokenGet = getObj("graphic", tokenID);
            const repChar  = getObj('character', characterID);

            if (mods) {
                tokenGet.set(mods);
                setDefaultTokenForCharacter(repChar,tokenGet);
            } else {
                log("Mods not found"); 
            };

            chatMessage(`<div style="text-align:center;">Damage: ${mods.bar1_value} / ${mods.bar1_max = str}</div><div style="text-align:center;">Fatigue: ${mods.bar2_value} / ${mods.bar2_max = agi}</div><div style="text-align:center;">Mutation Points: ${mods.bar3_value} / ${mods.bar3_max}</div><div style="text-align:center;">Show Name: ${mods.showname}</div><div style="text-align:center;">Show Bar 1: ${mods.showplayers_bar1}</div><div style="text-align:center;">Show Bar 2: ${mods.showplayers_bar2}</div>
            <div style="text-align:center;">Show Bar 2: ${mods.showplayers_bar3}</div>`);
        });
    },

    //Used to get character attributes for Linking Tokens
    getIDsFromTokens = (selectedToken) => {
        return [selectedToken].map(obj => getObj("graphic", obj._id))
            .filter(x => !!x)
            .map(token => token.get("represents"))
            .filter(id => getObj("character", id || ""));
    },

    chatMessage = (feedback) => {
        sendChat('Module Helper', '/w gm <div ' + divstyle + '>' +
            `<div ${headstyle}>Module Helper</div>` +
            `<div ${substyle}>Menu (v.${version})</div>` +
            '<div ' + arrowstyle + '></div>' +
            feedback +
            '</div>'
        );
    },

    registerEventHandlers = () => {
        on('chat:message', handleInput);
    };

    return {
        RegisterEventHandlers: registerEventHandlers
    };

}());

on("ready",() => {
    'use strict';
    handoutFormatter.RegisterEventHandlers();
});
